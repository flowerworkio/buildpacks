#!/usr/bin/env bash

set -euo pipefail
bin_dir=$(cd $(dirname $0); pwd)
source "$bin_dir/io.sh"

io::title "===> phoenix buildpack"

asdf_layer="/layers/flowerworkio_asdf/asdf/"
buildpack_layer="$1"
mix_layer="$1/mix"
phoenix_layer="$1/phoenix"
platform_dir="$2"
build_plan="$3"

mkdir -p "$mix_layer"
mkdir -p "$mix_layer/.mix"
mkdir -p "$mix_layer/.hex"
mkdir -p "$phoenix_layer"

io::title "---> Sourcing asdf"
source "$asdf_layer/profile.d/asdf.sh"
asdf info

io::title "---> Setting MIX_ENV, MIX_HOME, HEX_HOME"
mkdir -p "$mix_layer/env"
cat > "$mix_layer/env/mix" <<-EOF
MIX_ENV=prod
MIX_HOME=$mix_layer/.mix
HEX_HOME=$mix_layer/.hex
EOF
set -o allexport
source "$mix_layer/env/mix"
set +o allexport

io::title "---> Setting LANG, LANGUAGE, LC_ALL"
mkdir -p "$mix_layer/env"
cat > "$mix_layer/env/locale" <<-EOF
LANG=en_US.UTF-8
LANGUAGE=en_US:en
LC_ALL=en_US.UTF-8
EOF
set -o allexport
source "$mix_layer/env/locale"
set +o allexport
locale

io::title "---> Cleaning up directories to avoid cross-compilation"
rm -rf ./_build/ ./deps/ ./assets/node_modules

io::title "---> Installing Hex"
mix local.hex --force > /dev/null

io::title "---> Installing Rebar"
mix local.rebar --force > /dev/null

io::title "---> Installing and compiling hex packages"
mix deps.get
mix deps.compile

io::title "---> Installing npm packages"
if [ -f ./assets/package-lock.json ]; then
  io::info "Found package-lock.json"
  npm install --prefix assets
elif [ -f ./assets/yarn.lock ]; then
  io::info "Found yarn.lock"
  yarn install --cwd assets/
else
  io::info "No npm package manager files found in ./assets"
fi

io::title "---> Installing tailwind binary"
mix tailwind.install

io::title "---> Installing esbuild binary"
mix esbuild.install

io::title "---> Compile assets"
mix assets.deploy

io::title "---> Extracting app name"
mix app.tree > release_name
release_name=$(cat release_name | head -n 1)

io::title "---> Compiling release"
mix release --force --overwrite --path $phoenix_layer

io::title "---> Writing $mix_layer.toml"
cat > "$mix_layer.toml" <<-EOF
[types]
build = true
cache = false
launch = true

[metadata]
EOF

io::title "---> Writing $phoenix_layer.toml"
cat > "$phoenix_layer.toml" <<-EOF
[types]
build = true
cache = false
launch = true

[metadata]
EOF

io::title "---> Setting default start command"
cat > "$buildpack_layer/launch.toml" <<-EOF
[[processes]]
type = "start"
command = "$phoenix_layer/bin/$release_name"
args = ["start"]
direct = false
default = true

[[processes]]
type = "iex"
command = "$phoenix_layer/bin/$release_name"
args = ["start_iex"]
direct = false
default = false

[[processes]]
type = "eval"
command = "$phoenix_layer/bin/$release_name"
args = ["eval"]
direct = false
default = false
EOF
